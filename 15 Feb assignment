{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c295ec54-28b8-44b1-b6a7-a7323cb74507",
   "metadata": {},
   "source": [
    "#### Q1. What is multiprocessing in python ? Why is it useful?\n",
    "\n",
    "Ans- Multiprocessing refers to the capability of running multiple processes simultaneously, each with its own memory space. Multiprocessing allows Python programs to take advantage of modern multi-core processors, which are prevalent in most computers today.\n",
    "The multiprocessing module in Python provides a way to create and manage multiple processes, allowing tasks to be split among different cores of the CPU, which can lead to significant performance improvements for CPU-bound tasks. Each process runs independently of others, and they do not share memory, which can avoid some of the complexities and potential issues related to concurrent access to shared data that can arise in multithreading.\n",
    "\n",
    "#### Here are some reasons why multiprocessing is useful in Python:\n",
    "\n",
    "1. Parallel Processing: Multiprocessing enables you to perform multiple tasks in parallel, making efficient use of the available CPU cores. This is particularly beneficial for computationally intensive tasks that can be divided into smaller sub-tasks that can run independently.\n",
    "\n",
    "2. Improved Performance: For CPU-bound tasks, multiprocessing can lead to improved performance and reduced execution time by leveraging multiple cores of the CPU.\n",
    "\n",
    "3. Isolation: Each process runs in its own memory space, so issues like race conditions and deadlocks that are common in multithreading are mostly avoided. It helps in creating more robust and reliable programs.\n",
    "\n",
    "4. Utilizing Multiple CPUs: With the proliferation of multi-core CPUs in modern computers, multiprocessing allows you to harness the full power of your hardware, resulting in better overall system utilization.\n",
    "\n",
    "5. Improved Responsiveness: For certain tasks, multiprocessing can prevent the program from becoming unresponsive due to intensive computations, as they can be offloaded to separate processes.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ecc4e0e-4220-4fb8-b900-8d72ef9f046a",
   "metadata": {},
   "source": [
    "#### Q2. What is the difference between multiprocessing and multithreading?\n",
    "\n",
    "Ans- Multiprocessing and multithreading are both techniques used for concurrent execution in computer programs, but they differ in how they handle parallelism and utilize resources. Here are the key differences between multiprocessing and multithreading:\n",
    "\n",
    "1. Definition:\n",
    "Multiprocessing: In multiprocessing, multiple processes run independently and concurrently, each with its own memory space. Each process has its own copy of the program's variables and data. Multithreading: In multithreading, multiple threads run within the same process, sharing the same memory space. All threads in a process have access to the same variables and data.\n",
    "\n",
    "2. Resource Usage:\n",
    "Multiprocessing: Each process runs in its own memory space, which means it requires more system resources. However, it can take advantage of multiple CPU cores, making it suitable for CPU-bound tasks. Multithreading: Threads within a process share the same memory space, which results in less resource consumption compared to multiprocessing. However, due to the Global Interpreter Lock (GIL) in CPython (the default Python implementation), only one thread can execute Python bytecode at a time. This limitation makes multithreading less effective for CPU-bound tasks in Python.\n",
    "\n",
    "3. Isolation:\n",
    "Multiprocessing: Processes are isolated from each other, meaning issues like race conditions and deadlocks are mostly avoided since each process has its own memory space. Multithreading: Threads share the same memory space, which can lead to complications with concurrent access to shared data. Developers must implement thread synchronization techniques (e.g., locks) to prevent race conditions and maintain data integrity.\n",
    "\n",
    "4.Complexity:\n",
    "Multiprocessing: Managing processes requires more overhead and can be slightly more complex than multithreading, as communication between processes often involves message passing mechanisms like queues or pipes. Multithreading: Threads are generally lighter-weight and easier to create and manage compared to processes. However, the shared memory can introduce complexities in handling concurrent access to data.\n",
    "\n",
    "5. Use Cases:\n",
    "Multiprocessing: Best suited for CPU-bound tasks that can be divided into smaller independent parts. It is useful for taking advantage of multiple CPU cores and performing parallel computations. Multithreading: Well-suited for I/O-bound tasks, where the threads can overlap I/O operations and keep the program responsive while waiting for I/O to complete. In Python, multithreading is less effective for CPU-bound tasks due to the GIL."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38e94ad9-80a5-4c49-b8e6-e1b326f161ed",
   "metadata": {},
   "source": [
    "#### Q3. . Write a python to create a process using a multiprocessing module ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "630faa68-abff-49e4-afb5-50653d540e2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my main program\n",
      "this is my multiprocessig program\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "\n",
    "def test():\n",
    "    print(\"this is my multiprocessig program\")\n",
    "    \n",
    "if __name__==\"__main__\":\n",
    "    m=multiprocessing.Process(target=test)\n",
    "    print(\"this is my main program\")\n",
    "    m.start()\n",
    "    m.join()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02b448b2-1483-40e9-bea0-4376e497abeb",
   "metadata": {},
   "source": [
    "#### Q4. What is a multiprocessing pool in python? Why is it used?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d904d1c-127d-4be1-a96d-da8d017f0a15",
   "metadata": {},
   "source": [
    "#### Ans- In Python, a multiprocessing pool is a useful feature provided by the multiprocessing module that allows you to perform parallel processing on a collection of input data. It's particularly beneficial for executing a function on multiple inputs concurrently, distributing the workload among multiple processes in a controlled manner.\n",
    "\n",
    "The multiprocessing pool is implemented using a pool of worker processes, where each worker process is responsible for executing a function on a specific input from the collection. The pool manages the creation and distribution of tasks to the worker processes, making it easy to leverage multiple CPU cores and achieve parallelism for CPU-bound tasks.\n",
    "\n",
    "The pool is used to parallelize CPU-bound tasks, such as computationally intensive calculations or processing large datasets, by distributing the workload among multiple processes. It simplifies the process of creating and managing multiple processes, and it helps utilize the full power of modern multi-core processors, making programs more efficient and responsive."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80434146-923b-4df9-b0ce-05e5c0396837",
   "metadata": {},
   "source": [
    "#### Q5. How can we create a pool of worker processes in python using the multiprocessing module?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fb7493f3-3d3c-4f1e-9d5d-25a56acaabf2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "\n",
    "# Step 1: Import the multiprocessing module\n",
    "\n",
    "# Step 2: Determine the number of worker processes (let's use 4 as an example)\n",
    "num_worker_processes = 4\n",
    "\n",
    "# Step 3: Create a function that represents the task to be executed by the worker processes\n",
    "def square_function(x):\n",
    "    return x ** 2\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Step 4: Create a Pool object with the desired number of worker processes\n",
    "    with multiprocessing.Pool(processes=num_worker_processes) as pool:\n",
    "\n",
    "        # Step 5: Use the pool to distribute tasks among the worker processes\n",
    "        data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "        results = pool.map(square_function, data)\n",
    "\n",
    "    # The Pool automatically manages the worker processes and collects the results.\n",
    "    # The results list will contain the output of the square_function applied to each element of the data list.\n",
    "    print(\"Results:\", results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b52bd8af-a12b-4ba7-b03f-c4e0176e0362",
   "metadata": {},
   "source": [
    "#### Q6. Write a python program to create 4 processes, each process should print a different number using the multiprocessing module in python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "53308053-09f3-43c3-9dca-b92ee3d1e4e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Process Process-11 prints: 1 squared is 1\n",
      "Process Process-12 prints: 2 squared is 4\n",
      "Process Process-13 prints: 3 squared is 9\n",
      "Process Process-14 prints: 4 squared is 16\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "\n",
    "def print_square(number):\n",
    "    square = number ** 2\n",
    "    print(f\"Process {multiprocessing.current_process().name} prints: {number} squared is {square}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    processes = []\n",
    "    numbers = [1, 2, 3, 4]\n",
    "\n",
    "    for number in numbers:\n",
    "        process = multiprocessing.Process(target=print_square, args=(number,))\n",
    "        processes.append(process)\n",
    "        process.start()\n",
    "\n",
    "    for process in processes:\n",
    "        process.join()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18929364-6fac-4142-a884-a9c66ca4f829",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
